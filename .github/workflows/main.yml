on:
  push:
    branches:
      - master
  workflow_dispatch:
    branches:
      - master

name: GitHub Action for vsce

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Install vsce
        run: npm install -g vsce
        
      - name: Run Yarn
        run: yarn

      - name: Install PoshSemanticVersion PS module
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PoshSemanticVersion

      - name: Get current version from package.json
        id: getpackageversion
        run: |
          $version = ((Get-Content .\package.json | ConvertFrom-Json).version).ToString()
          Write-Host 'Current version from package.json: ' $version
          Write-Host "::set-output name=VERSION::$version"

      - name: Get published version from VS Code extension REST API
        id: getPublishedVersion
        run: |
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("VSMarketplaceBadge", "1.0")
          $headers.Add("Accept", "application/json;api-version=3.0-preview.1")
          $headers.Add("Content-Type", "application/json")
          $body = "{`"filters`":[{`"criteria`":[{`"filterType`":7,`"value`":`"PrateekMahendrakar.PrettyXML`"},{`"filterType`":12,`"value`":4096}]}],`"flags`":914}"
          $response = Invoke-RestMethod 'https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery' -Method Post -Headers $headers -Body $body
          $publishedVersion= ($response.results[0].extensions.versions.version).ToString()
          Write-Host 'Last Published version: '$publishedVersion 
          Write-Host "::set-output name=PUB_VERSION::$publishedVersion"

      - name: Compare and bump next version
        id: bumpversion
        run: |
          Import-Module PoshSemanticVersion
          $nextVersion = "patch"
          $com = Compare-SemanticVersion ${{ steps.getpackageversion.outputs.VERSION }} ${{ steps.getPublishedVersion.outputs.PUB_VERSION }}

          if ($com.Precedence -eq '>') {
            Write-Host "Version in package.json is higher than latest published version"
            Write-Host "::set-output name=VERSIONSTR::''"
          }
          elseif ($com.Precedence -eq '<') {
            Write-Host "Version in package.json is less than latest published version"
            $packagejson = (Get-Content .\package.json | ConvertFrom-Json)
            $packagejson.version = ${{ steps.getPublishedVersion.outputs.PUB_VERSION }}
            $packagejson | ConvertTo-Json | Out-File ".\package.json" 
            Write-Host "::set-output name=VERSIONSTR::"$nextversion
          }
          else {
            Write-Host "Version in package.json is equal to latest published version"
            Write-Host "::set-output name=VERSIONSTR::"$nextversion
          }

      - name: VSCE publish
        run: |
          git config --global user.email "prateek.mahendrakar@gmail.com"
          git config --global user.name "Prateek Mahendrakar"
          vsce publish ${{ steps.bumpversion.outputs.VERSIONSTR }} -p $env:VSCE_PAT --yarn
        env:
          VSCE_PAT: ${{ secrets.VSCE_PRETTYXML }}          
          
